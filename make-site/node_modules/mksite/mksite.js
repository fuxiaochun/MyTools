/**
 * 命令行创建网站项目结构
 * @author Fu Xiaochun
 * @link tool.varfn.com
 * $ mksite start name [base / app]
 */
'use strict';

const fs = require('fs');
const path = require('path');
const CONFIG = require('./config.json');
const SEP = path.sep;
const CWD = process.cwd();

const DIR_CONFIG = CONFIG.dir_config;

const BASE_FILE = CONFIG.base_file;

let todo = process.argv[2];
let project_name = process.argv[3]
let project_type = process.argv[4];


// 设置默认值
project_name = project_name ? project_name : 'mySite';
project_type = project_type === 'app' ? 'app' : 'base';

let project_dir = CWD+SEP+project_name;


// 操作指令
function doIt(todo){
	if(todo !== 'start'){
		console.log("Error derective, input 'varfn start name [base / app]' to do it right");
		return false;
	}
	if(mkdir(project_dir,project_type)){
		mkBaseFiles();
	};
}

doIt(todo);

// 检测项目目录是否存在
function checkProjectStat(project_dir){
	try{
		fs.statSync(project_dir);
		console.log('该项目目录名被占用！');
		return false;
	}catch(e){
		return true;
	}
}

// 创建目录
function mkdir(project_dir,project_type){
	if(!checkProjectStat(project_dir)){
		return false;
	}
	// 创建项目目录,要先同步创建主目录，子目录才能基于此创建。
	fs.mkdirSync(project_dir);
	// 创建项目结构目录
	let dir = DIR_CONFIG[project_type];
	for(let i=0;i<dir.length;i++){
		fs.mkdirSync(project_dir + dir[i]);
	}
	return true;
}

// 创建基础文件
function mkBaseFiles(){
	let files = BASE_FILE;
	let flag = true;
	for(let i=0;i<files.length;i++){
		let site = files[i].lastIndexOf('/');
		let file_name = files[i].substr(site+1);
		fs.readFile(__dirname+SEP+'tpl'+SEP+file_name,'utf8',(err,content) => {
			if(err){
				console.log(file_name+'文件读取失败！');
				flag = false;
			}
			fs.writeFile(project_dir+files[i],content,'utf8',(err) => {
				if(err){
					console.log(file_name+'文件创建失败！');
					flag = false;
				}
			});
		});
		if(!flag) break;
	}
	flag && console.log('项目结构创建成功！');
}
